const fs = require('fs');
const path = require('path');
const pkg = require(path.join(process.cwd(), 'package.json'));
const pathEntry = path.join(process.cwd(), 'src/index.js'); // TODO 动态取
const pathOutputDir = path.join(process.cwd(), 'dist');
const NormalModuleReplacementPlugin = require('webpack/lib/NormalModuleReplacementPlugin');

/**
 * @author Vinsea
 * @description 打包时在index.html里添加自定义的js文件，或者打组件时 在 bundle 中加入js .
 */
class ExtraJsFileWebpackPlugin {

    /**
     * 初始化
     * @param {ExtraJsFileWebpackPluginOptions} [options]
     */
    constructor(options) {
        const userOptions = options || {};
        const defaultOptions = {
            isComponent: userOptions.isComponent,
            filename: userOptions.filename || 'version',
            name: userOptions.name || pkg.name,
            version: userOptions.version || pkg.version,
            author: userOptions.author || pkg.author,
            hash: true,
            pathOnly: false,
            paths: [],
            template: ''
        }
        this.pathOutput = path.join(pathOutputDir, 'index-with-version.js');
        this.options = Object.assign(defaultOptions, userOptions);
    }

    /**
     * apply is called by the webpack main compiler during the start phase
     * @param {WebpackCompiler} compiler 
     */
    apply(compiler) {
        // 组件模式
        if (this.options.isComponent) {
            this.replaceNormalModule();
            new NormalModuleReplacementPlugin(
                new RegExp(pathEntry),
                this.pathOutput,
            ).apply(compiler);
            console.log('[ExtraJsFileWebpackPlugin] 已生成 index-with-version.js 为最终入口文件。', this.pathOutput)
            return;
        }

        // web项目模式
        compiler.plugin('compilation', (compilation, opt) => {
            compilation.plugin('html-webpack-plugin-before-html-processing', (htmlPluginData, callback) => {
                this.options.paths.forEach(pathItem => {
                    console.log('[ExtraJsFileWebpackPlugin] 插入文件', pathItem);
                    htmlPluginData.assets.js.unshift(pathItem);
                });
                if (this.options.pathOnly) {
                    return;
                }
                this.generateVersionFile(compiler, htmlPluginData, callback);
            });
        });
    }

    /**
     * 替换组件模式下 src/index.js 这个入口文件的内容
     * 把 export default 替换成：
     * xxxxxx
     * export default
     * TODO 每个项目配置的 src/index.js 可能不同，需要动态取，现在先固定，因为大部分都是用 src/index.js
     */
    replaceNormalModule() {
        const replaceText = 'export default';
        const entryContent = fs.readFileSync(pathEntry, 'utf8')
        const template = this.options.template || this.handleTemplate();
        const final = entryContent.replace(replaceText, `${template}\n${replaceText}`)
        // 不存在就创建
        if (!fs.existsSync(pathOutputDir)) {
            fs.mkdirSync(pathOutputDir);
        }
        fs.writeFileSync(this.pathOutput, final, 'utf8')
    }

    /**
     * 生成版本文件
     * @param {WebpackCompiler} compiler 
     * @param {Object} htmlPluginData 
     * @param {Function} callback 
     */
    generateVersionFile(compiler, htmlPluginData, callback) {
        console.log('[html-webpack-plugin-before-html-processing] 开始创建js文件');
        const { hash, filename } = this.options;
        // 获取文件名
        const fileName = hash ? `${filename}.${new Date().getTime()}.js` : `${filename}.js`;
        // 获取项目设置的打包目录
        const projectOutputPath = path.relative(compiler.options.context, compiler.options.output.path);
        // 获取打包目录完整路径
        const dir = path.join(process.cwd(), projectOutputPath);
        // 不存在就创建
        if (!fs.existsSync(dir)) {
            fs.mkdirSync(dir);
        }
        // 写入文件
        const OUTPUT_PATH_ALL = path.join(dir, fileName);
        // 没有传模板就用自带的
        const template = this.options.template || this.handleTemplate();
        fs.writeFileSync(OUTPUT_PATH_ALL, template, 'utf8');
        console.log('[build extra js file] DONE:', OUTPUT_PATH_ALL);
        // 添加到 html-webpack-plugin 渲染资源队列
        htmlPluginData.assets.js.unshift('/' + fileName);
        // 执行回调
        callback(null, htmlPluginData);
    }

    /**
     * 模板文件
     * @returns {String}
     */
    handleTemplate() {
        const now = new Date();
        now.setHours(now.getHours() + 8);
        const current = JSON.stringify({
            name: this.options.name,
            version: this.options.version,
            buildDate: now,
            author: this.options.author,
            dependencies: pkg.dependencies,
        })
        // TODO key 应该从options里取，并做校验
        return `/* Automatically generated by 'extra-jsfile-webpack-plugin' */
window.__EXTRA_JSFILE_WEBPACK_PLUGIN__ = ${current}
`;
    }

}
module.exports = ExtraJsFileWebpackPlugin;